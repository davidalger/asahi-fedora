#!/bin/sh
# SPDX-License-Identifier: MIT

set -euo pipefail

if ! which jq > /dev/null || ! which perl > /dev/null || ! which wget > /dev/null; then
    >&2 printf "\033[31mERROR\033[0m: Missing one of the following dependencies: jq, wget, perl\n"
    exit -1
fi

# Where the scripts expect to be located
BASE_DIR=/opt/fedora-asahi-remix && cd "${BASE_DIR}"

echo ""
echo "Downloading install script"
wget -q https://fedora-asahi-remix.org/install -O ./.install.tmp

echo ""
echo "Configuring script"
echo ""
eval $(grep -E 'export\W+[A-Z]+_(FLAG|DATA|BASE)=' ./.install.tmp | tee /dev/stderr)

echo ""
echo "Fetching installer"

wget -q "${VERSION_FLAG}" -O ./installer_latest
VERSION_FLAG="file://${BASE_DIR}/installer_latest"
PKG_VER=$(cat ./installer_latest)
wget -nc "${INSTALLER_BASE}/installer-${PKG_VER}.tar.gz"
INSTALLER_BASE="file://${BASE_DIR}"

echo "Fetching installer data"
curl -s "${INSTALLER_DATA}" > ./.installer_data.json.tmp
INSTALLER_DATA="file://${BASE_DIR}/.installer_data.json.tmp"

echo "Finding latest packages"
PKG_DATE=$(curl -s "${INSTALLER_DATA}" | jq -r '
    (.os_list[] | .package | split("-")[3] // split("-")[2] | split(".")[0])[0:8]
' | sort -un | tail -n1)
echo ""

echo "Filtering installer data"
curl -s "${INSTALLER_DATA}" | jq -r '
    .os_list[] | select((.package | split("-")[3] // split("-")[2] | split(".")[0]) >= "'"${PKG_DATE}"'")
' > ./.installer_data.tmp

# Include existing packages if still present in installer data
if [[ -d ./os ]]; then
    EXISTING_PACKAGES=$(ls -1t ./os)
    for PACKAGE in ${EXISTING_PACKAGES}; do
        if [[ $(cat ./.installer_data.tmp | jq -r 'select(.package == "'"${PACKAGE}"'")') == "" ]]; then
            cat ./.installer_data.json.tmp | jq -r '.os_list[] | select(.package == "'"${PACKAGE}"'")' >> ./.installer_data.tmp
        fi
    done
fi

cat ./.installer_data.tmp | jq -sr '. = {os_list: .}' > ./installer_data.json
rm ./.installer_data.json.tmp ./.installer_data.tmp
INSTALLER_DATA="file://${BASE_DIR}/installer_data.json"

echo ""
echo "Fetching packages"

PACKAGES=$(curl -s "${INSTALLER_DATA}" | jq -r '.os_list[].package | split(".")[0]')

mkdir -p ./os && cd ./os
for PACKAGE in ${PACKAGES}; do
    if [ ! -f ./${PACKAGE}.zip ]; then
        echo "--> ${PACKAGE} downloading"
        wget -nc ${REPO_BASE}/os/${PACKAGE}.zip
    else
        echo "--> ${PACKAGE} already present"
    fi
done
REPO_BASE="${BASE_DIR}"
cd ../

echo ""
echo "Fetching firmware for stubOS"

# See the installer source for a list of URLs to firmware images
# https://github.com/AsahiLinux/asahi-installer/blob/main/src/main.py#L46-L89

mkdir -p ./ipsw && cd ./ipsw
IPSW_IMAGES=(
    https://updates.cdn-apple.com/2023SummerFCS/fullrestores/032-69606/D3E05CDF-E105-434C-A4A1-4E3DC7668DD0/UniversalMac_13.5_22G74_Restore.ipsw
)
for IPSW_IMAGE in "${IPSW_IMAGES[@]}"; do
    wget -nc "${IPSW_IMAGE}"
done
cd ../

echo "Updating install script"
perl -pi -e 's#VERSION_FLAG=https.*#VERSION_FLAG='"${VERSION_FLAG}"'#' ./.install.tmp
perl -pi -e 's#INSTALLER_BASE=https.*#INSTALLER_BASE='"${INSTALLER_BASE}"'#' ./.install.tmp
perl -pi -e 's#INSTALLER_DATA=https.*#INSTALLER_DATA='"${INSTALLER_DATA}"'#' ./.install.tmp
perl -pi -e 's#REPO_BASE=https.*#REPO_BASE='"${REPO_BASE}"'\nexport IPSW_BASE="\$REPO_BASE/ipsw"#' ./.install.tmp
chmod +x ./.install.tmp
echo ""
mv ./.install.tmp ./install
grep -E 'export\W+[A-Z]+_(FLAG|DATA|BASE)=' ./install
echo ""
